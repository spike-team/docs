openapi: 3.0.0
info:
  version: '1.0.0'

  title: Studentable.net

  contact:
    email: by09115@outlook.kr

  x-logo:
    url: 'https://avatars1.githubusercontent.com/u/52960074?s=200&v=4'

  description: |
    studentable.net의 RESTful API Docs입니다.
    # Notice
    문서를 읽다가 애매하거나 잘못된 정보가 있으면 김재훈에게 문의하세요.

tags:
  - name: School
    description: 학교 정보 관련
  - name: Meal
    description: 급식 정보 관련
  - name: TimeTableManager
    description: 시간표 관리자 관련
  - name: TimeTable
    description: 시간표 관련
  - name: Class
    description: 수업 정보 관련
  - name: NotifySubscription
    description: FCM Notification
servers:
  - url: 'http://studentable.jaehoon.kim/api/v1'

paths:
  '/school':
    get:
      tags:
        - School
      summary: 학교 코드 검색
      description: |
        # 학교 코드를 조회합니다.
      parameters:
        - name: key
          in: query
          schema:
            type: string
            example: "대덕소프트웨어"
      responses:
        200:
          description: 조회 성공
          content:
            application/json:
              schema:
                type: string
                example: "G000000170"
        400:
          description: 해당 학교가 없음
  '/meal':
    get:
      tags:
        - Meal
      summary: 급식 조회
      description: |
        급식 정보를 조회합니다.
      parameters:
      - name: date
        in: query
        description: 날짜
        schema:
          type: string
          example: "2019-09-26"
      - name: school_id
        in: query
        description: 학교 코드
        schema:
          type: string
          example: "G000000170"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
        '400':
          description: 잘못된 형식의 학교 코드 혹은 날짜 형식
        '404':
          description: 해당 정보를 찾을 수 없음
  '/manager/auth':
    post:
      tags:
        - TimeTableManager
      summary: 관리자 로그인
      description: 관리자의 access 토큰과 refresh 토큰을 발급받습니다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        201:
          description: Login succeed
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    example: "Th12312isis.Tr123123uly.Accessto123123ken"
                  refresh:
                    type: string
                    example: "2oiejijdoia.12qweiod9hxjio.oisdmnjdfls"
        403:
          description: Invalid credentials
    delete:
      tags:
        - TimeTableManager
      summary: 로그아웃
      description: 리프레시 토큰 파기
      security: [
        {RefreshJSONWebTokenAuthentication: []}
      ]
      responses:
        204:
          description: Logout succeed

    patch:
      tags:
        - TimeTableManager
      summary: 토큰 리프레시
      description: 관리자의 액세스 토큰을 재발급합니다.
      security: [
        {RefreshJSONWebTokenAuthentication: []}
      ]
      responses:
        201:
          description: 재발급 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    example: "Th12312isis.Tr123123uly.Accessto123123ken"
        401:
          description: invalid refresh token
  '/manager/signup':
    post:
      tags:
        - TimeTableManager
      summary: 관리자 회원가입
      description: 관리자의 회원가입을 진행하기 전에 이메일 인증을 수행해야 합니다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "by09115@korea.kr"
                password:
                  type: string
                  example: "p@ssword"
                schoolCode:
                  type: string
                  example: "G0000170"
      responses:
        201:
          description: 회원가입 성공
        409:
          description: 해당 이메일을 가진 계정이 이미 존재합니다.
  '/manager/signup/verify':
    post:
      tags:
        - TimeTableManager
      summary: 관리자 이메일 인증
      description: 이메일에 인증 링크를 같이 발송
      parameters:
      - name: code
        in: query
        description: 인증 코드
        schema:
          type: string
          example: "{{UUID}}"
      responses:
        201:
          description: 인증 성공
        409:
          description: 해당 이메일을 가진 계정이 이미 존재합니다.
  '/timetable/class':
    post:
      tags:
        - Class
      summary: 수업 추가
      description: |
        수업을 추가합니다. 엑셀 import는 '[POST]/timetable/class/excel'로 가능합니다.

        *hope_day는 수업 배정 희망 요일로, index값의 배열입니다.(월요일: 0, 화요일: 1, 수요일: 2, 목요일: 3, 금요일: 4)*
      security: [
        {JSONWebTokenAuthentication: []}
      ]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  teacher_id:
                    type: string
                    example: "1b20b30d1a023e01e23d"
                  class_name:
                    type: string
                    example: "한국사"
                  times_per_week:
                    type: integer
                    example: 3
                  hope_day:
                    type: array
                    items:
                      type: integer
                    example: [1, 2, 3]

      responses:
        201:
          description: 수업 추가 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    class_id:
                      type: string
                      example: "5da4a3d87367ec286b1394de"
                    teacher_id:
                      type: string
                      example: "5da4a5d77367ec31a114af0e"
                    teacher_name:
                      type: string
                      example: "서현철"
                    class_name:
                      type: string
                      example: "한국사"
                    times_per_week:
                      type: integer
                      example: 3
                    hope_day:
                      type: array
                      items:
                        type: integer
                      example: [1, 2, 3]
        400:
          description: 일치하지 않는 데이터 형식
        401:
          description: Unauthorized
        404:
          description: 해당 ID를 갖고 있는 선생님을 찾을 수 없음
    put:
      tags:
        - Class
      summary: 수업 수정
      parameters:
        - name: id
          in: query
          schema:
            type: string
            example: 5da4a5d77367ec31a114af0e
      security: [
        {JSONWebTokenAuthentication: []}
      ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                teacher_id:
                  type: string
                  example: "5da4a3d87367ec286b1394de"
                class_name:
                  type: string
                  example: "확률과 통계"
                times_per_week:
                  type: integer
                  example: 2
                hope_day:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 3]
      responses:
        401:
          description: 권한 없음
        404:
          description: 존재하지 않는 수업 ID
    delete:
      tags:
        - Class
      summary: 수업 삭제
      parameters:
        - name: id
          in: query
          schema:
            type: string
            example: "5da4a5d77367ec31a114af0e"
      security: [
        {JSONWebTokenAuthentication: []}
      ]
      responses:
        200:
          description: 삭제 성공
        401:
          description: 권한 없음
        404:
          description: 존재하지 않는 수업 ID
  '/timetable':
    get:
      tags:
        - TimeTable
      summary: 시간표 조회
      parameters:
        - name: schoolId
          in: query
          schema:
            type: string
            example: "G0000170"
      responses:
        200:
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "19wijsdo93i2ew9dsijontow"
    post:
      tags:
        - TimeTable
      summary: 시간표 생성
      security: [
        {JSONWebTokenAuthentication: []}
      ]
      responses:
        201:
          description: 생성 완료
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "1da4a5d59362ec31a114af0e"
        401:
          description: 권한 없음

  '/student':
    put:
      tags:
        - NotifySubscription
      summary: 학생 정보 수정
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "by091154@gmail.com"
                schoolCode:
                  type: string
                  example: "G000170"
                schoolClass:
                  type: string
                  example: "3-2"
      responses:
        201:
          description: 수정 성공
        404:
          description: 없는 계정

  '/notify/subscribe':
    put:
      tags:
        - NotifySubscription
      summary: Subscribe the android client notification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "by09115@korea.kr"
                deviceToken:
                  type: string
                  example: "ThisIsDeviceToken"
      responses:
        201:
          description: 알림 구독자 리스트에 성공적으로 추가됨
        409:
          description: 이미 있는 계정

components:
  securitySchemes:
    JSONWebTokenAuthentication:
      type: apiKey
      in: header
      name: Authorization
    RefreshJSONWebTokenAuthentication:
      type: apiKey
      in: header
      name: X-Refresh-Token
  schemas:
    Meal:
      type: object
      properties:
        date:
          description: 날짜
          type: string
          example: '2019-09-26'
        breakfast:
          description: 아침
          type: array
          example: ["현미밥", "참치김치찌개", "에그스크램블", "요구르트"]
          items:
            type: string
        lunch:
          description: 점심
          type: array
          example: ["현미밥", "참치김치찌개", "에그스크램블", "요구르트"]
          items:
            type: string
        dinner:
          description: 저녁
          type: array
          example: ["현미밥", "참치김치찌개", "에그스크램블", "요구르트"]
          items:
            type: string
